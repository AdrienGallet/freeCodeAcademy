# Learning Notes: Responsive Web Design

This document contains all of the lessons from the FreeCodeCamp **Responsive Web Design** course. The course mainly teaches HTML (Hypertext Markup Language) and CSS (Cascading Style Sheets). 

## Learning objectives

- Learn basic HTML and CSS
- Learn modern techniques like CSS variables
- Learn best practicties for accessibility
- Learn how to make web-pages respond to different screen sizes (Flebox)



## Projects covered

- Build a Photo App
- Build a penguin
- Build a quiz size
- Build a photo gallery
- Create a magazine article layout



# Notes

## HTML Basics

HTML works by using *opening*  `<>` and *closing* tags  `</>`.

## Common elements

- Heading elements `<h1>` 
  - `h1` to `h6` heading elements signify the importance of the heading (with `h1` being the most important)
  - Only use ONE `h1` heading, and use `h2` or lower for everything else.
- Paragraphs `<p>`  
  - `p` elements are used to create a paragraph.
- Comments
  - `<!--` to `-->` are comment tags.
- HTML5 elements
  - Some HTML5 elements are there to make a web-page easier to read and help with Seach Engine Optimisation (SEO) and accessibility.
  - Ex: `<main>` is one of them.
  - Ec: `<section>` 
- Image elements
  - `<img >` is an example of a *self-closing tag*. It can be used to add an image.
- Figure element
  - `<figure>` allows on to provide a caption to an image.
  - Within the `<figure>` element, one can provide a `<figcaption>` tag to provide a caption. 
- Anchor element `<a>`
  - Used to link something to another page with the `href` attribute (see HTML attributes.
  - Between the closing and opening `a` tags goes the text that will be linked!
  - **ANY** text/element can be turned into a link by using the `a` anchor tags around it:
    - `<p> This is a <a href="https://freecodecamp.org">website</a></p>` 
    - `<a href="google.com"><img src="URL.com"></a>`  
- Un-ordered list `<ul>` 
  - Creates a non-numbered list (similar to Markdown)
  - Every-item within the list needs the `<li>` and `</li>` elements
- Un-ordered list `<ol>` 
  - Created an ordered list (by default it will be numbered)
  - Again need to use `<li>` elements
- Emphasis `<em>`
  - Provides italcis to text.
- Strong `<strong>`
  - Bolds some text
- Form `<form>`
  - This allows one to collect information from users.
  - Needs attribute: `action` to send data to somewhere.
- Inputs `<input>` 
  - Also a unique example of a *self-inclosing tag*.
  - This is an *inline* element (an element that does not appear in a new line).
  - Can have several different attributes such as:
    - `type`: can be *text*, 
    - `name`: name of the variable to be saved.
    - `placeholder`: placeholder text to explain what goes into a particular field.
    - `required`: ensures that a field needs to be filled out to fill out the `form.
- Button `<button>` 
  - Creates a clickable button.
  - This is an *inline* element (an element that does not appear in a new line).
  - Default behaviour, when inclosed within a `<form>` element is to send the `<input>` to the `action` attribute address.

## Nesting

- Nested elements can be created through indentation of **2** spaces.

## HTML attributes

- HTML *attributes* are special words used inside the **opening** tag of an element to control that element's behaviour.
- `src` attribute
  - The `src` attribute indicate the "source" from which something should be pulled (such as an image).
  - To use `src`: `<img src="google.com"`. Note that this is currently not pointing to an image.
- `alt` attribute
  - Considered at the *attribute* text, and improves accessibiity and is displayed if the image fails to load.
  - `<img alt="Test">` 
  - Note the use of "" quotation marks.
- `target` attribute
  - Works specifically with the `a` anchor element. By providing `target="_blank"` it opens the `href` link in a new tab.
- `action` attribute
  - Used with `<form>`, and indicates where the data should be sent.
-  `placeholder` attribute
  - Used to provide helpful text in pre-existing fields.
- `required` attribute
  - *static* attribute without being assigned anything, ensures a field is filled out.







Simple example 

```html
<h1>This is a H1 Heading!</h1>
```




